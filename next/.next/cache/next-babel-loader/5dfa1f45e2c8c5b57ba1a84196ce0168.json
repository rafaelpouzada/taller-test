{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/drupal/app/next/src/lib/withData.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { pick } from 'ramda';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from 'recompose';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport Head from 'next/head';\nimport initApollo, { introspect } from \"./initApollo\";\nimport { IgnoreStyleSheets } from \"../containers/IgnoreStyleSheets\";\nexport default (function (ComposedComponent) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var props, introspectionQueryResultData, fragmentMatcher, initialProps, apolloClient, router, context, tree;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(ComposedComponent && ComposedComponent.getInitialProps)) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return ComposedComponent.getInitialProps(ctx);\n\n                case 3:\n                  _context.t0 = _context.sent;\n                  _context.next = 7;\n                  break;\n\n                case 6:\n                  _context.t0 = {};\n\n                case 7:\n                  props = _context.t0;\n                  _context.next = 10;\n                  return introspect();\n\n                case 10:\n                  introspectionQueryResultData = _context.sent;\n                  fragmentMatcher = new IntrospectionFragmentMatcher({\n                    introspectionQueryResultData: introspectionQueryResultData\n                  });\n                  initialProps = _objectSpread({\n                    __APOLLO_INSTROSPECTION__: introspectionQueryResultData\n                  }, props); // When already on the client-side, do not defer initialization.\n\n                  if (!(process.browser || process.env.APOLLO_SSR_OFF)) {\n                    _context.next = 15;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", initialProps);\n\n                case 15:\n                  apolloClient = initApollo({\n                    context: pick(['res'], ctx),\n                    cacheOptions: {\n                      fragmentMatcher: fragmentMatcher\n                    }\n                  });\n                  _context.prev = 16;\n                  router = pick(['query', 'pathname', 'asPath', 'res', 'req'], ctx);\n                  /**\n                   * Some contexts are not available during SSR. `router`, for instance.\n                   * We are basically passing to getDataFromTree an extra context object to\n                   * hold these, when necessary.\n                   *\n                   * @see: https://github.com/zeit/next.js/issues/2908\n                   */\n\n                  context = {\n                    router: router\n                  }; // Mount ComposedComponent element tree.\n\n                  tree = __jsx(ApolloProvider, {\n                    client: apolloClient,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 78\n                    },\n                    __self: this\n                  }, __jsx(IgnoreStyleSheets, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 79\n                    },\n                    __self: this\n                  }, __jsx(ComposedComponent, _extends({\n                    url: router\n                  }, props, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 80\n                    },\n                    __self: this\n                  })))); // Run all GraphQL queries in the component tree and extract the resulting data\n\n                  _context.next = 22;\n                  return getDataFromTree(tree, context);\n\n                case 22:\n                  _context.next = 27;\n                  break;\n\n                case 24:\n                  _context.prev = 24;\n                  _context.t1 = _context[\"catch\"](16);\n                  console.error('SSR Apollo data loading error:', _context.t1); // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\n\n                case 27:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind(); // Inject current Apollo state on the page's initial properties.\n\n                  initialProps.__APOLLO_STATE__ = apolloClient.cache.extract();\n                  return _context.abrupt(\"return\", initialProps);\n\n                case 30:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[16, 24]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props));\n      var fragmentMatcher = new IntrospectionFragmentMatcher({\n        introspectionQueryResultData: _this.props.__APOLLO_INSTROSPECTION__\n      });\n      _this.apollo = initApollo({\n        initialState: _this.props.__APOLLO_STATE__,\n        cacheOptions: {\n          fragmentMatcher: fragmentMatcher\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        // Extract Apollo state, for ComposedComponent doesn't need to know it existed.\n        var _this$props = this.props,\n            __APOLLO_STATE__ = _this$props.__APOLLO_STATE__,\n            __APOLLO_INSTROSPECTION__ = _this$props.__APOLLO_INSTROSPECTION__,\n            props = _objectWithoutProperties(_this$props, [\"__APOLLO_STATE__\", \"__APOLLO_INSTROSPECTION__\"]);\n\n        return __jsx(ApolloProvider, {\n          client: this.apollo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, __jsx(ComposedComponent, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        })));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(getDisplayName(ComposedComponent), \")\")), _defineProperty(_class, \"propTypes\", {\n    __APOLLO_STATE__: PropTypes.object,\n    __APOLLO_INSTROSPECTION__: PropTypes.object\n  }), _temp;\n});","map":{"version":3,"sources":["/drupal/app/next/src/lib/withData.js"],"names":["React","pick","PropTypes","getDisplayName","ApolloProvider","getDataFromTree","IntrospectionFragmentMatcher","Head","initApollo","introspect","IgnoreStyleSheets","ComposedComponent","ctx","getInitialProps","props","introspectionQueryResultData","fragmentMatcher","initialProps","__APOLLO_INSTROSPECTION__","process","browser","env","APOLLO_SSR_OFF","apolloClient","context","cacheOptions","router","tree","console","error","rewind","__APOLLO_STATE__","cache","extract","apollo","initialState","Component","object"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { pick } from 'ramda'\nimport PropTypes from 'prop-types'\nimport { getDisplayName } from 'recompose'\nimport { ApolloProvider, getDataFromTree } from 'react-apollo'\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\nimport Head from 'next/head'\n\nimport initApollo, { introspect } from './initApollo'\n\nimport { IgnoreStyleSheets } from '../containers/IgnoreStyleSheets'\n\nexport default ComposedComponent => class WithData extends React.Component {\n  static displayName = `WithData(${getDisplayName(ComposedComponent)})`\n\n  static propTypes = {\n    __APOLLO_STATE__: PropTypes.object,\n    __APOLLO_INSTROSPECTION__: PropTypes.object,\n  }\n\n  /**\n   * Fetch GraphQL data on server to match request.\n   *\n   * Next.js is of big help here; it WILL automatically run this function\n   * on first page load (not when routing on the client-side) and inject the\n   * resolved properties, serialized, to the component once it is loaded on the\n   * client-side.\n   *\n   * Keep in mind that for client-side routing this method WILL get called,\n   * meaning you have to account for it running on some situations.\n   *\n   * @param {Object} ctx\n   * @param {String} ctx.pathname Path section of URL\n   * @param {Object} ctx.query Query string section of URL parsed as an object\n   * @param {String} ctx.asPath String of the actual path (including the query) shows in the browser\n   * @param {Object} ctx.req HTTP request object (server only)\n   * @param {Object} ctx.res HTTP response object (server only)\n   * @param {Object} ctx.jsonPageRes Fetch Response object (client only)\n   * @param {Object} ctx.err Error object if any error is encountered during the rendering\n   *\n   * @return {Object} initial props.\n   */\n  static async getInitialProps (ctx) {\n    // Evaluate the composed component's getInitialProps().\n    // This setup is needed to allow for additional getInitialProps on each\n    // page using Apollo connector.\n    const props = ComposedComponent && ComposedComponent.getInitialProps\n      ? await ComposedComponent.getInitialProps(ctx)\n      : {}\n\n    const introspectionQueryResultData = await introspect()\n    const fragmentMatcher = new IntrospectionFragmentMatcher({ introspectionQueryResultData })\n\n    const initialProps = { __APOLLO_INSTROSPECTION__: introspectionQueryResultData, ...props }\n\n    // When already on the client-side, do not defer initialization.\n    if (process.browser || process.env.APOLLO_SSR_OFF) return initialProps\n\n    const apolloClient = initApollo({\n      context: pick(['res'], ctx),\n      cacheOptions: { fragmentMatcher }\n    })\n\n    try {\n      const router = pick(['query', 'pathname', 'asPath', 'res', 'req'], ctx)\n\n      /**\n       * Some contexts are not available during SSR. `router`, for instance.\n       * We are basically passing to getDataFromTree an extra context object to\n       * hold these, when necessary.\n       *\n       * @see: https://github.com/zeit/next.js/issues/2908\n       */\n      const context = { router }\n\n      // Mount ComposedComponent element tree.\n      const tree = (\n        <ApolloProvider client={ apolloClient }>\n          <IgnoreStyleSheets>\n            <ComposedComponent url={ router } { ...props } />\n          </IgnoreStyleSheets>\n        </ApolloProvider>\n      )\n\n      // Run all GraphQL queries in the component tree and extract the resulting data\n      await getDataFromTree(tree, context)\n    }\n    catch (error) {\n      console.error('SSR Apollo data loading error:', error)\n      // Prevent Apollo Client GraphQL errors from crashing SSR.\n      // Handle them in components via the data.error prop:\n      // http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\n    }\n\n    // getDataFromTree does not call componentWillUnmount\n    // head side effect therefore need to be cleared manually\n    Head.rewind()\n\n    // Inject current Apollo state on the page's initial properties.\n    initialProps.__APOLLO_STATE__ = apolloClient.cache.extract()\n\n    return initialProps\n  }\n\n  constructor (props) {\n    super(props)\n\n    const fragmentMatcher = new IntrospectionFragmentMatcher({\n      introspectionQueryResultData: this.props.__APOLLO_INSTROSPECTION__\n    })\n\n    this.apollo = initApollo({\n      initialState: this.props.__APOLLO_STATE__,\n      cacheOptions: { fragmentMatcher },\n    })\n  }\n\n  render () {\n    // Extract Apollo state, for ComposedComponent doesn't need to know it existed.\n    const { __APOLLO_STATE__, __APOLLO_INSTROSPECTION__, ...props } = this.props\n\n    return (\n      <ApolloProvider client={ this.apollo }>\n        <ComposedComponent { ...props } />\n      </ApolloProvider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}