{"ast":null,"code":"\"use strict\";\n\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/drupal/app/next/src/modules/channel/containers/NewChannelContainer.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CreateChannel ($name: String!) {\\n    createTaxonomyTermChannel (input: { name: $name }) {\\n      violations {\\n        message\\n        path\\n        code\\n      }\\n      errors\\n      entity {\\n        entityId\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { func } from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nvar mutation = gql(_templateObject()); // @TODO: implement optimistic query on channels?\n\nvar NewMessageContainer = function NewMessageContainer(_ref) {\n  var children = _ref.children;\n  return __jsx(Mutation, {\n    mutation: mutation,\n    refetchQueries: ['Channels'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, function (mutate) {\n    return children(function (name) {\n      if (name) {\n        mutate({\n          variables: {\n            name: name\n          }\n        });\n      }\n    });\n  });\n};\n\nNewMessageContainer.propTypes = {\n  children: func\n};\nexport default NewMessageContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/channel/containers/NewChannelContainer.js"],"names":["React","func","gql","Mutation","mutation","NewMessageContainer","children","mutate","name","variables","propTypes"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,IAAMC,QAAQ,GAAGF,GAAH,mBAAd,C,CAgBA;;AAEA,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAC1B,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAGF,QAArB;AAAgC,IAAA,cAAc,EAAG,CAAC,UAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,UAAAG,MAAM;AAAA,WACND,QAAQ,CAAC,UAAAE,IAAI,EAAI;AACf,UAAIA,IAAJ,EAAU;AACRD,QAAAA,MAAM,CAAC;AAAEE,UAAAA,SAAS,EAAE;AAAED,YAAAA,IAAI,EAAJA;AAAF;AAAb,SAAD,CAAN;AACD;AACF,KAJO,CADF;AAAA,GADV,CAD0B;AAAA,CAA5B;;AAYAH,mBAAmB,CAACK,SAApB,GAAgC;AAC9BJ,EAAAA,QAAQ,EAAEL;AADoB,CAAhC;AAIA,eAAeI,mBAAf","sourcesContent":["import React from 'react'\nimport { func } from 'prop-types'\nimport gql from 'graphql-tag'\nimport { Mutation } from 'react-apollo'\n\nconst mutation = gql`\n  mutation CreateChannel ($name: String!) {\n    createTaxonomyTermChannel (input: { name: $name }) {\n      violations {\n        message\n        path\n        code\n      }\n      errors\n      entity {\n        entityId\n      }\n    }\n  }\n`\n\n// @TODO: implement optimistic query on channels?\n\nconst NewMessageContainer = ({ children }) => (\n  <Mutation mutation={ mutation } refetchQueries={ ['Channels'] }>\n    { mutate => (\n      children(name => {\n        if (name) {\n          mutate({ variables: { name } })\n        }\n      })\n    ) }\n  </Mutation>\n)\n\nNewMessageContainer.propTypes = {\n  children: func,\n}\n\nexport default NewMessageContainer\n"]},"metadata":{},"sourceType":"module"}