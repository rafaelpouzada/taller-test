{"ast":null,"code":"\"use strict\";\n\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/drupal/app/next/src/modules/channel/containers/NewMessageContainer.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CreateMessage ($user: String!, $channel: String!, $body: String!) {\\n    createMessageMessage(input: {\\n      userId: { targetId: $user }\\n      body: { value: $body }\\n      channel: { targetId: $channel }\\n    }) {\\n      errors\\n      violations {\\n        message\\n        path\\n        code\\n      }\\n      entity {\\n        entityId\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { func, shape, number } from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { Form, Field } from 'react-final-form';\nvar mutation = gql(_templateObject()); // @TODO: implement optimistic query on messages?\n\nvar NewMessageContainer = function NewMessageContainer(_ref) {\n  var children = _ref.children,\n      user = _ref.user,\n      channel = _ref.channel;\n  return __jsx(Mutation, {\n    mutation: mutation,\n    refetchQueries: ['Messages'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, function (send) {\n    return __jsx(Form, {\n      children: children,\n      onSubmit: function onSubmit(_ref2, _ref3) {\n        var body = _ref2.body;\n        var reset = _ref3.reset;\n        reset();\n        send({\n          variables: {\n            body: body,\n            user: user.uid,\n            channel: channel.tid\n          }\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  });\n};\n\nNewMessageContainer.propTypes = {\n  children: func,\n  user: shape({\n    uid: number.isRequired\n  }).isRequired,\n  channel: shape({\n    tid: number.isRequired\n  }).isRequired\n};\n/**\n * Composable message field.\n */\n\nNewMessageContainer.Message = function (props) {\n  return __jsx(Field, _extends({\n    name: \"body\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n};\n\nexport default NewMessageContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/channel/containers/NewMessageContainer.js"],"names":["React","func","shape","number","gql","Mutation","Form","Field","mutation","NewMessageContainer","children","user","channel","send","body","reset","variables","uid","tid","propTypes","isRequired","Message","props"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,YAApC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AAEA,IAAMC,QAAQ,GAAGJ,GAAH,mBAAd,C,CAoBA;;AAEA,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,IAAb,QAAaA,IAAb;AAAA,MAAmBC,OAAnB,QAAmBA,OAAnB;AAAA,SAC1B,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAGJ,QAArB;AAAgC,IAAA,cAAc,EAAG,CAAC,UAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,UAAAK,IAAI;AAAA,WACJ,MAAC,IAAD;AACE,MAAA,QAAQ,EAAGH,QADb;AAEE,MAAA,QAAQ,EAAG,gCAAyB;AAAA,YAAtBI,IAAsB,SAAtBA,IAAsB;AAAA,YAAZC,KAAY,SAAZA,KAAY;AAClCA,QAAAA,KAAK;AAELF,QAAAA,IAAI,CAAC;AACHG,UAAAA,SAAS,EAAE;AACTF,YAAAA,IAAI,EAAJA,IADS;AAETH,YAAAA,IAAI,EAAEA,IAAI,CAACM,GAFF;AAGTL,YAAAA,OAAO,EAAEA,OAAO,CAACM;AAHR;AADR,SAAD,CAAJ;AAOD,OAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADI;AAAA,GADR,CAD0B;AAAA,CAA5B;;AAqBAT,mBAAmB,CAACU,SAApB,GAAgC;AAC9BT,EAAAA,QAAQ,EAAET,IADoB;AAE9BU,EAAAA,IAAI,EAAET,KAAK,CAAC;AAAEe,IAAAA,GAAG,EAAEd,MAAM,CAACiB;AAAd,GAAD,CAAL,CAAkCA,UAFV;AAG9BR,EAAAA,OAAO,EAAEV,KAAK,CAAC;AAAEgB,IAAAA,GAAG,EAAEf,MAAM,CAACiB;AAAd,GAAD,CAAL,CAAkCA;AAHb,CAAhC;AAMA;;;;AAGAX,mBAAmB,CAACY,OAApB,GAA8B,UAAAC,KAAK;AAAA,SACjC,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC;AAAZ,KAAwBA,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADiC;AAAA,CAAnC;;AAIA,eAAeb,mBAAf","sourcesContent":["import React from 'react'\nimport { func, shape, number } from 'prop-types'\nimport gql from 'graphql-tag'\nimport { Mutation } from 'react-apollo'\nimport { Form, Field } from 'react-final-form'\n\nconst mutation = gql`\n  mutation CreateMessage ($user: String!, $channel: String!, $body: String!) {\n    createMessageMessage(input: {\n      userId: { targetId: $user }\n      body: { value: $body }\n      channel: { targetId: $channel }\n    }) {\n      errors\n      violations {\n        message\n        path\n        code\n      }\n      entity {\n        entityId\n      }\n    }\n  }\n`\n\n// @TODO: implement optimistic query on messages?\n\nconst NewMessageContainer = ({ children, user, channel }) => (\n  <Mutation mutation={ mutation } refetchQueries={ ['Messages'] }>\n    { send => (\n      <Form\n        children={ children }\n        onSubmit={ ({ body }, { reset }) => {\n          reset()\n\n          send({\n            variables: {\n              body,\n              user: user.uid,\n              channel: channel.tid\n            }\n          })\n        } }\n      />\n    ) }\n  </Mutation>\n)\n\nNewMessageContainer.propTypes = {\n  children: func,\n  user: shape({ uid: number.isRequired }).isRequired,\n  channel: shape({ tid: number.isRequired }).isRequired,\n}\n\n/**\n * Composable message field.\n */\nNewMessageContainer.Message = props => (\n  <Field name='body' { ...props } />\n)\n\nexport default NewMessageContainer\n"]},"metadata":{},"sourceType":"module"}