{"ast":null,"code":"\"use strict\";\n\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/drupal/app/next/src/modules/auth/containers/SigninContainer/SigninContainer.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Field } from 'react-final-form';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport { combine, condition, required, minLength, email, equalsField } from \"../../../../lib/form/validation\";\nimport { loginMutation, registerMutation } from \"./mutations\";\nexport const labels = {\n  name: 'Username',\n  email: 'E-mail',\n  password: 'Password',\n  passwordConfirm: 'Confirm password'\n};\nconst validations = {\n  name: combine([required]),\n  email: combine([required, email]),\n  password: combine([required, minLength(6)]),\n  passwordConfirm: condition((value, {\n    register\n  }) => register, [required, equalsField('password', labels.password)])\n};\n/**\n * Grab actual error from GraphQL error.\n */\n\nconst normalizeError = err => err.graphQLErrors ? err.graphQLErrors[0].message : err.message;\n/**\n * Redirect when registered/logged in.\n */\n\n\nconst redirect = () => {\n  Router.push('/channel', '/messages/general');\n  return undefined;\n};\n/**\n * Submit handler: switch between register and login based on form values.\n */\n\n\nconst handleSubmit = ({\n  register,\n  login\n}) => variables => (variables.register ? register : login)({\n  variables\n}).then(redirect).catch(normalizeError);\n\nconst SigninContainer = ({\n  children\n}) => __jsx(Mutation, {\n  mutation: loginMutation,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}, login => __jsx(Mutation, {\n  mutation: registerMutation,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}, register => __jsx(Form, {\n  children: children,\n  onSubmit: handleSubmit({\n    register,\n    login\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54\n  },\n  __self: this\n})));\n/**\n * Composable name field.\n */\n\n\nSigninContainer.Username = props => __jsx(Field, _extends({\n  name: \"name\",\n  validate: validations.name\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}));\n/**\n * Composable e-mail field.\n */\n\n\nSigninContainer.Email = props => __jsx(Field, _extends({\n  name: \"email\",\n  validate: validations.email\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79\n  },\n  __self: this\n}));\n/**\n * Composable password field.\n */\n\n\nSigninContainer.Password = props => __jsx(Field, _extends({\n  name: \"password\",\n  type: \"password\",\n  validate: validations.password\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90\n  },\n  __self: this\n}));\n/**\n * Composable password-confirm field.\n */\n\n\nSigninContainer.PasswordConfirm = props => __jsx(Field, _extends({\n  name: \"passwordConfirm\",\n  type: \"password\",\n  validate: validations.passwordConfirm,\n  validateFields: ['password']\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102\n  },\n  __self: this\n}));\n/**\n * Composable register field.\n */\n\n\nSigninContainer.Register = props => __jsx(Field, _extends({\n  name: \"register\"\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 115\n  },\n  __self: this\n}));\n\nSigninContainer.propTypes = {\n  children: PropTypes.func\n};\nexport default SigninContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/auth/containers/SigninContainer/SigninContainer.js"],"names":["React","PropTypes","Form","Field","Mutation","Router","combine","condition","required","minLength","email","equalsField","loginMutation","registerMutation","labels","name","password","passwordConfirm","validations","value","register","normalizeError","err","graphQLErrors","message","redirect","push","undefined","handleSubmit","login","variables","then","catch","SigninContainer","children","Username","props","Email","Password","PasswordConfirm","Register","propTypes","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Form, Field } from 'react-final-form'\nimport { Mutation } from 'react-apollo'\nimport Router from 'next/router'\n\nimport { combine, condition, required, minLength, email, equalsField } from 'app/lib/form/validation'\n\nimport { loginMutation, registerMutation } from './mutations'\n\nexport const labels = {\n  name: 'Username',\n  email: 'E-mail',\n  password: 'Password',\n  passwordConfirm: 'Confirm password',\n}\n\nconst validations = {\n  name: combine([required]),\n  email: combine([required, email]),\n  password: combine([required, minLength(6)]),\n  passwordConfirm: condition(\n    (value, { register }) => register,\n    [required, equalsField('password', labels.password)],\n  )\n}\n\n/**\n * Grab actual error from GraphQL error.\n */\nconst normalizeError = err => err.graphQLErrors ? err.graphQLErrors[0].message : err.message\n\n/**\n * Redirect when registered/logged in.\n */\nconst redirect = () => {\n  Router.push('/channel', '/messages/general')\n  return undefined\n}\n\n/**\n * Submit handler: switch between register and login based on form values.\n */\nconst handleSubmit = ({ register, login }) => variables =>\n  (variables.register ? register : login)({ variables })\n    .then(redirect)\n    .catch(normalizeError)\n\nconst SigninContainer = ({ children }) => (\n  <Mutation mutation={ loginMutation }>\n    { login => (\n      <Mutation mutation={ registerMutation }>\n        { register => (\n          <Form\n            children={ children }\n            onSubmit={ handleSubmit({ register, login }) }\n          />\n        ) }\n      </Mutation>\n    ) }\n  </Mutation>\n)\n\n/**\n * Composable name field.\n */\nSigninContainer.Username = props => (\n  <Field\n    name='name'\n    validate={ validations.name }\n    { ...props }\n  />\n)\n\n/**\n * Composable e-mail field.\n */\nSigninContainer.Email = props => (\n  <Field\n    name='email'\n    validate={ validations.email }\n    { ...props }\n  />\n)\n\n/**\n * Composable password field.\n */\nSigninContainer.Password = props => (\n  <Field\n    name='password'\n    type='password'\n    validate={ validations.password }\n    { ...props }\n  />\n)\n\n/**\n * Composable password-confirm field.\n */\nSigninContainer.PasswordConfirm = props => (\n  <Field\n    name='passwordConfirm'\n    type='password'\n    validate={ validations.passwordConfirm }\n    validateFields={ ['password'] }\n    { ...props }\n  />\n)\n\n/**\n * Composable register field.\n */\nSigninContainer.Register = props => (\n  <Field name='register' { ...props } />\n)\n\nSigninContainer.propTypes = {\n  children: PropTypes.func,\n}\n\nexport default SigninContainer\n"]},"metadata":{},"sourceType":"module"}