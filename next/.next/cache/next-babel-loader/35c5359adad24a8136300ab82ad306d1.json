{"ast":null,"code":"\"use strict\";\n\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/drupal/app/next/src/modules/channel/containers/ChannelsContainer.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Channels {\\n    channels: taxonomyTermQuery(limit: 20, filter: { conditions: [{ field: \\\"vid\\\", value: [\\\"channel\\\"] }] }) {\\n      count\\n      entities {\\n        ... on TaxonomyTerm {\\n          tid\\n          name\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { pipe, defaultTo, prop, over, lensProp } from 'ramda';\nimport React from 'react';\nimport { func } from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { rename } from \"../../../lib/func\";\nvar query = gql(_templateObject());\nvar normalize = pipe(rename('data', 'channels'), over(lensProp('channels'), pipe(prop('channels'), prop('entities'), defaultTo([]))));\n\nvar ChannelsContainer = function ChannelsContainer(_ref) {\n  var children = _ref.children;\n  return __jsx(Query, {\n    query: query,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, pipe(normalize, children));\n};\n\nChannelsContainer.propTypes = {\n  children: func\n};\nexport default ChannelsContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/channel/containers/ChannelsContainer.js"],"names":["pipe","defaultTo","prop","over","lensProp","React","func","gql","Query","rename","query","normalize","ChannelsContainer","children","propTypes"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA,SAASC,MAAT;AAEA,IAAMC,KAAK,GAAGH,GAAH,mBAAX;AAcA,IAAMI,SAAS,GAAGX,IAAI,CACpBS,MAAM,CAAC,MAAD,EAAS,UAAT,CADc,EAEpBN,IAAI,CAACC,QAAQ,CAAC,UAAD,CAAT,EAAuBJ,IAAI,CAC7BE,IAAI,CAAC,UAAD,CADyB,EAE7BA,IAAI,CAAC,UAAD,CAFyB,EAG7BD,SAAS,CAAC,EAAD,CAHoB,CAA3B,CAFgB,CAAtB;;AASA,IAAMW,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SACxB,MAAC,KAAD;AAAO,IAAA,KAAK,EAAGH,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIV,IAAI,CAACW,SAAD,EAAYE,QAAZ,CADR,CADwB;AAAA,CAA1B;;AAMAD,iBAAiB,CAACE,SAAlB,GAA8B;AAC5BD,EAAAA,QAAQ,EAAEP;AADkB,CAA9B;AAIA,eAAeM,iBAAf","sourcesContent":["import { pipe, defaultTo, prop, over, lensProp } from 'ramda'\nimport React from 'react'\nimport { func } from 'prop-types'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\n\nimport { rename } from 'app/lib/func'\n\nconst query = gql`\n  query Channels {\n    channels: taxonomyTermQuery(limit: 20, filter: { conditions: [{ field: \"vid\", value: [\"channel\"] }] }) {\n      count\n      entities {\n        ... on TaxonomyTerm {\n          tid\n          name\n        }\n      }\n    }\n  }\n`\n\nconst normalize = pipe(\n  rename('data', 'channels'),\n  over(lensProp('channels'), pipe(\n    prop('channels'),\n    prop('entities'),\n    defaultTo([]),\n  )),\n)\n\nconst ChannelsContainer = ({ children }) => (\n  <Query query={ query }>\n    { pipe(normalize, children) }\n  </Query>\n)\n\nChannelsContainer.propTypes = {\n  children: func,\n}\n\nexport default ChannelsContainer\n"]},"metadata":{},"sourceType":"module"}