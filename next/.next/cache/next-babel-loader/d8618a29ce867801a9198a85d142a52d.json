{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"/drupal/app/next/src/modules/channel/containers/MessagesContainer.js\";\nvar __jsx = React.createElement;\nimport { pipe, defaultTo, map, prop, over, lensProp } from 'ramda';\nimport React from 'react';\nimport { func, shape, number } from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport Box from 'grommet/components/Box';\nimport Heading from 'grommet/components/Heading';\nimport AlertIcon from 'grommet/components/icons/base/Alert';\nimport { rename } from \"../../../lib/func\";\nconst query = gql`\n  query Messages ($channel: String!) {\n    messages: messageQuery(\n      limit: 50\n      filter: {\n        conditions: [{\n          field: \"channel\"\n          value: [$channel]\n        }]\n      }\n    ) {\n      count\n      entities {\n        id\n        author: entityOwner {\n          name\n        }\n        ... on Message {\n          message: body {\n            value\n          }\n        }\n      }\n    }\n  }\n`;\nconst normalizeMessage = pipe(over(lensProp('author'), prop('name')), over(lensProp('message'), prop('value')));\nconst normalize = pipe(rename('data', 'messages'), over(lensProp('messages'), pipe(prop('messages'), prop('entities'), defaultTo([]), map(normalizeMessage))));\n\nconst MessagesContainer = ({\n  children,\n  channel\n}) => channel && channel.tid ? __jsx(Query, {\n  query: query,\n  variables: {\n    channel: channel.tid\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}, pipe(normalize, children)) : __jsx(Box, {\n  full: \"vertical\",\n  justify: \"center\",\n  align: \"center\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, __jsx(AlertIcon, {\n  size: \"large\",\n  colorIndex: \"critical\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}), __jsx(Heading, {\n  tag: \"h2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}, \"This channel does not exist :(\"));\n\nMessagesContainer.propTypes = {\n  children: func,\n  channel: shape({\n    tid: number.isRequired\n  })\n};\nexport default MessagesContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/channel/containers/MessagesContainer.js"],"names":["pipe","defaultTo","map","prop","over","lensProp","React","func","shape","number","gql","Query","Box","Heading","AlertIcon","rename","query","normalizeMessage","normalize","MessagesContainer","children","channel","tid","propTypes","isRequired"],"mappings":";;;;AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,YAApC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA,OAAOC,GAAP,MAAgB,wBAAhB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AAEA,SAASC,MAAT;AAEA,MAAMC,KAAK,GAAGN,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;CAAlB;AA2BA,MAAMO,gBAAgB,GAAGjB,IAAI,CAC3BI,IAAI,CAACC,QAAQ,CAAC,QAAD,CAAT,EAAqBF,IAAI,CAAC,MAAD,CAAzB,CADuB,EAE3BC,IAAI,CAACC,QAAQ,CAAC,SAAD,CAAT,EAAsBF,IAAI,CAAC,OAAD,CAA1B,CAFuB,CAA7B;AAKA,MAAMe,SAAS,GAAGlB,IAAI,CACpBe,MAAM,CAAC,MAAD,EAAS,UAAT,CADc,EAEpBX,IAAI,CAACC,QAAQ,CAAC,UAAD,CAAT,EAAuBL,IAAI,CAC7BG,IAAI,CAAC,UAAD,CADyB,EAE7BA,IAAI,CAAC,UAAD,CAFyB,EAG7BF,SAAS,CAAC,EAAD,CAHoB,EAI7BC,GAAG,CAACe,gBAAD,CAJ0B,CAA3B,CAFgB,CAAtB;;AAUA,MAAME,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACxBA,OAAO,IAAIA,OAAO,CAACC,GAAnB,GACE,MAAC,KAAD;AAAO,EAAA,KAAK,EAAGN,KAAf;AAAuB,EAAA,SAAS,EAAG;AAAEK,IAAAA,OAAO,EAAEA,OAAO,CAACC;AAAnB,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACItB,IAAI,CAACkB,SAAD,EAAYE,QAAZ,CADR,CADF,GAKE,MAAC,GAAD;AAAK,EAAA,IAAI,EAAC,UAAV;AAAqB,EAAA,OAAO,EAAC,QAA7B;AAAsC,EAAA,KAAK,EAAC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,SAAD;AAAW,EAAA,IAAI,EAAC,OAAhB;AAAwB,EAAA,UAAU,EAAC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,MAAC,OAAD;AAAS,EAAA,GAAG,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFF,CANJ;;AAaAD,iBAAiB,CAACI,SAAlB,GAA8B;AAC5BH,EAAAA,QAAQ,EAAEb,IADkB;AAE5Bc,EAAAA,OAAO,EAAEb,KAAK,CAAC;AACbc,IAAAA,GAAG,EAAEb,MAAM,CAACe;AADC,GAAD;AAFc,CAA9B;AAOA,eAAeL,iBAAf","sourcesContent":["import { pipe, defaultTo, map, prop, over, lensProp } from 'ramda'\nimport React from 'react'\nimport { func, shape, number } from 'prop-types'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\n\nimport Box from 'grommet/components/Box'\nimport Heading from 'grommet/components/Heading'\nimport AlertIcon from 'grommet/components/icons/base/Alert'\n\nimport { rename } from 'app/lib/func'\n\nconst query = gql`\n  query Messages ($channel: String!) {\n    messages: messageQuery(\n      limit: 50\n      filter: {\n        conditions: [{\n          field: \"channel\"\n          value: [$channel]\n        }]\n      }\n    ) {\n      count\n      entities {\n        id\n        author: entityOwner {\n          name\n        }\n        ... on Message {\n          message: body {\n            value\n          }\n        }\n      }\n    }\n  }\n`\n\nconst normalizeMessage = pipe(\n  over(lensProp('author'), prop('name')),\n  over(lensProp('message'), prop('value')),\n)\n\nconst normalize = pipe(\n  rename('data', 'messages'),\n  over(lensProp('messages'), pipe(\n    prop('messages'),\n    prop('entities'),\n    defaultTo([]),\n    map(normalizeMessage)\n  )),\n)\n\nconst MessagesContainer = ({ children, channel }) => (\n  channel && channel.tid ? (\n    <Query query={ query } variables={ { channel: channel.tid } }>\n      { pipe(normalize, children) }\n    </Query>\n  ) : (\n    <Box full='vertical' justify='center' align='center'>\n      <AlertIcon size='large' colorIndex='critical' />\n      <Heading tag='h2'>This channel does not exist :(</Heading>\n    </Box>\n  )\n)\n\nMessagesContainer.propTypes = {\n  children: func,\n  channel: shape({\n    tid: number.isRequired\n  })\n}\n\nexport default MessagesContainer\n"]},"metadata":{},"sourceType":"module"}