{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/drupal/app/next/src/lib/withData.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { pick } from 'ramda';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from 'recompose';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport Head from 'next/head';\nimport initApollo, { introspect } from \"./initApollo\";\nimport { IgnoreStyleSheets } from \"../containers/IgnoreStyleSheets\";\nexport default (ComposedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(ctx) {\n      // Evaluate the composed component's getInitialProps().\n      // This setup is needed to allow for additional getInitialProps on each\n      // page using Apollo connector.\n      const props = ComposedComponent && ComposedComponent.getInitialProps ? await ComposedComponent.getInitialProps(ctx) : {};\n      const introspectionQueryResultData = await introspect();\n      const fragmentMatcher = new IntrospectionFragmentMatcher({\n        introspectionQueryResultData\n      });\n\n      const initialProps = _objectSpread({\n        __APOLLO_INSTROSPECTION__: introspectionQueryResultData\n      }, props); // When already on the client-side, do not defer initialization.\n\n\n      if (process.browser || process.env.APOLLO_SSR_OFF) return initialProps;\n      const apolloClient = initApollo({\n        context: pick(['res'], ctx),\n        cacheOptions: {\n          fragmentMatcher\n        }\n      });\n\n      try {\n        const router = pick(['query', 'pathname', 'asPath', 'res', 'req'], ctx);\n        /**\n         * Some contexts are not available during SSR. `router`, for instance.\n         * We are basically passing to getDataFromTree an extra context object to\n         * hold these, when necessary.\n         *\n         * @see: https://github.com/zeit/next.js/issues/2908\n         */\n\n        const context = {\n          router\n        }; // Mount ComposedComponent element tree.\n\n        const tree = __jsx(ApolloProvider, {\n          client: apolloClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, __jsx(IgnoreStyleSheets, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, __jsx(ComposedComponent, _extends({\n          url: router\n        }, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        })))); // Run all GraphQL queries in the component tree and extract the resulting data\n\n\n        await getDataFromTree(tree, context);\n      } catch (error) {\n        console.error('SSR Apollo data loading error:', error); // Prevent Apollo Client GraphQL errors from crashing SSR.\n        // Handle them in components via the data.error prop:\n        // http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\n      } // getDataFromTree does not call componentWillUnmount\n      // head side effect therefore need to be cleared manually\n\n\n      Head.rewind(); // Inject current Apollo state on the page's initial properties.\n\n      initialProps.__APOLLO_STATE__ = apolloClient.cache.extract();\n      return initialProps;\n    }\n\n    constructor(props) {\n      super(props);\n      const fragmentMatcher = new IntrospectionFragmentMatcher({\n        introspectionQueryResultData: this.props.__APOLLO_INSTROSPECTION__\n      });\n      this.apollo = initApollo({\n        initialState: this.props.__APOLLO_STATE__,\n        cacheOptions: {\n          fragmentMatcher\n        }\n      });\n    }\n\n    render() {\n      // Extract Apollo state, for ComposedComponent doesn't need to know it existed.\n      const _this$props = this.props,\n            {\n        __APOLLO_STATE__,\n        __APOLLO_INSTROSPECTION__\n      } = _this$props,\n            props = _objectWithoutProperties(_this$props, [\"__APOLLO_STATE__\", \"__APOLLO_INSTROSPECTION__\"]);\n\n      return __jsx(ApolloProvider, {\n        client: this.apollo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, __jsx(ComposedComponent, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${getDisplayName(ComposedComponent)})`), _defineProperty(_class, \"propTypes\", {\n    __APOLLO_STATE__: PropTypes.object,\n    __APOLLO_INSTROSPECTION__: PropTypes.object\n  }), _temp;\n});","map":{"version":3,"sources":["/drupal/app/next/src/lib/withData.js"],"names":["React","pick","PropTypes","getDisplayName","ApolloProvider","getDataFromTree","IntrospectionFragmentMatcher","Head","initApollo","introspect","IgnoreStyleSheets","ComposedComponent","WithData","Component","getInitialProps","ctx","props","introspectionQueryResultData","fragmentMatcher","initialProps","__APOLLO_INSTROSPECTION__","process","browser","env","APOLLO_SSR_OFF","apolloClient","context","cacheOptions","router","tree","error","console","rewind","__APOLLO_STATE__","cache","extract","constructor","apollo","initialState","render","object"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { pick } from 'ramda'\nimport PropTypes from 'prop-types'\nimport { getDisplayName } from 'recompose'\nimport { ApolloProvider, getDataFromTree } from 'react-apollo'\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\nimport Head from 'next/head'\n\nimport initApollo, { introspect } from './initApollo'\n\nimport { IgnoreStyleSheets } from '../containers/IgnoreStyleSheets'\n\nexport default ComposedComponent => class WithData extends React.Component {\n  static displayName = `WithData(${getDisplayName(ComposedComponent)})`\n\n  static propTypes = {\n    __APOLLO_STATE__: PropTypes.object,\n    __APOLLO_INSTROSPECTION__: PropTypes.object,\n  }\n\n  /**\n   * Fetch GraphQL data on server to match request.\n   *\n   * Next.js is of big help here; it WILL automatically run this function\n   * on first page load (not when routing on the client-side) and inject the\n   * resolved properties, serialized, to the component once it is loaded on the\n   * client-side.\n   *\n   * Keep in mind that for client-side routing this method WILL get called,\n   * meaning you have to account for it running on some situations.\n   *\n   * @param {Object} ctx\n   * @param {String} ctx.pathname Path section of URL\n   * @param {Object} ctx.query Query string section of URL parsed as an object\n   * @param {String} ctx.asPath String of the actual path (including the query) shows in the browser\n   * @param {Object} ctx.req HTTP request object (server only)\n   * @param {Object} ctx.res HTTP response object (server only)\n   * @param {Object} ctx.jsonPageRes Fetch Response object (client only)\n   * @param {Object} ctx.err Error object if any error is encountered during the rendering\n   *\n   * @return {Object} initial props.\n   */\n  static async getInitialProps (ctx) {\n    // Evaluate the composed component's getInitialProps().\n    // This setup is needed to allow for additional getInitialProps on each\n    // page using Apollo connector.\n    const props = ComposedComponent && ComposedComponent.getInitialProps\n      ? await ComposedComponent.getInitialProps(ctx)\n      : {}\n\n    const introspectionQueryResultData = await introspect()\n    const fragmentMatcher = new IntrospectionFragmentMatcher({ introspectionQueryResultData })\n\n    const initialProps = { __APOLLO_INSTROSPECTION__: introspectionQueryResultData, ...props }\n\n    // When already on the client-side, do not defer initialization.\n    if (process.browser || process.env.APOLLO_SSR_OFF) return initialProps\n\n    const apolloClient = initApollo({\n      context: pick(['res'], ctx),\n      cacheOptions: { fragmentMatcher }\n    })\n\n    try {\n      const router = pick(['query', 'pathname', 'asPath', 'res', 'req'], ctx)\n\n      /**\n       * Some contexts are not available during SSR. `router`, for instance.\n       * We are basically passing to getDataFromTree an extra context object to\n       * hold these, when necessary.\n       *\n       * @see: https://github.com/zeit/next.js/issues/2908\n       */\n      const context = { router }\n\n      // Mount ComposedComponent element tree.\n      const tree = (\n        <ApolloProvider client={ apolloClient }>\n          <IgnoreStyleSheets>\n            <ComposedComponent url={ router } { ...props } />\n          </IgnoreStyleSheets>\n        </ApolloProvider>\n      )\n\n      // Run all GraphQL queries in the component tree and extract the resulting data\n      await getDataFromTree(tree, context)\n    }\n    catch (error) {\n      console.error('SSR Apollo data loading error:', error)\n      // Prevent Apollo Client GraphQL errors from crashing SSR.\n      // Handle them in components via the data.error prop:\n      // http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\n    }\n\n    // getDataFromTree does not call componentWillUnmount\n    // head side effect therefore need to be cleared manually\n    Head.rewind()\n\n    // Inject current Apollo state on the page's initial properties.\n    initialProps.__APOLLO_STATE__ = apolloClient.cache.extract()\n\n    return initialProps\n  }\n\n  constructor (props) {\n    super(props)\n\n    const fragmentMatcher = new IntrospectionFragmentMatcher({\n      introspectionQueryResultData: this.props.__APOLLO_INSTROSPECTION__\n    })\n\n    this.apollo = initApollo({\n      initialState: this.props.__APOLLO_STATE__,\n      cacheOptions: { fragmentMatcher },\n    })\n  }\n\n  render () {\n    // Extract Apollo state, for ComposedComponent doesn't need to know it existed.\n    const { __APOLLO_STATE__, __APOLLO_INSTROSPECTION__, ...props } = this.props\n\n    return (\n      <ApolloProvider client={ this.apollo }>\n        <ComposedComponent { ...props } />\n      </ApolloProvider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}