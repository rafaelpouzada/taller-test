{"ast":null,"code":"\"use strict\";\n\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/drupal/app/next/src/modules/auth/containers/CurrentUserContainer.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query CurrentUser {\\n    user: currentUserContext {\\n      ... on UserUser {\\n        uid\\n        mail\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { func } from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { isClient } from \"../../../lib/func\";\nvar query = gql(_templateObject());\nvar refetchedOnClient = false;\n\nvar CurrentUserContainer = function CurrentUserContainer(_ref) {\n  var children = _ref.children;\n  return __jsx(Query, {\n    query: query,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, function (_ref2) {\n    var loading = _ref2.loading,\n        error = _ref2.error,\n        data = _ref2.data,\n        refetch = _ref2.refetch,\n        result = _objectWithoutProperties(_ref2, [\"loading\", \"error\", \"data\", \"refetch\"]);\n\n    if (loading) return \"Loading...\";\n    if (error) return \"Error! \".concat(error.message); // Force a refetch on the client inside to make sure\n    // the cached SSR anonymous user is replaced, in case\n    // the user is already logged in..\n\n    if (!loading && !refetchedOnClient && isClient()) {\n      refetchedOnClient = true;\n      refetch();\n    }\n\n    return children(_objectSpread({\n      user: data.user\n    }, result));\n  });\n};\n\nCurrentUserContainer.propTypes = {\n  children: func\n};\nexport default CurrentUserContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/auth/containers/CurrentUserContainer.js"],"names":["React","func","gql","Query","isClient","query","refetchedOnClient","CurrentUserContainer","children","loading","error","data","refetch","result","message","user","propTypes"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA,SAASC,QAAT;AAEA,IAAMC,KAAK,GAAGH,GAAH,mBAAX;AAYA,IAAII,iBAAiB,GAAG,KAAxB;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAC3B,MAAC,KAAD;AAAO,IAAA,KAAK,EAAGH,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,iBAAkD;AAAA,QAA/CI,OAA+C,SAA/CA,OAA+C;AAAA,QAAtCC,KAAsC,SAAtCA,KAAsC;AAAA,QAA/BC,IAA+B,SAA/BA,IAA+B;AAAA,QAAzBC,OAAyB,SAAzBA,OAAyB;AAAA,QAAbC,MAAa;;AAClD,QAAIJ,OAAJ,EAAa,OAAO,YAAP;AACb,QAAIC,KAAJ,EAAW,wBAAiBA,KAAK,CAACI,OAAvB,EAFuC,CAGlD;AACA;AACA;;AACA,QAAI,CAACL,OAAD,IAAY,CAACH,iBAAb,IAAkCF,QAAQ,EAA9C,EAAkD;AAChDE,MAAAA,iBAAiB,GAAG,IAApB;AACAM,MAAAA,OAAO;AACR;;AAED,WAAOJ,QAAQ;AAAGO,MAAAA,IAAI,EAAEJ,IAAI,CAACI;AAAd,OAAuBF,MAAvB,EAAf;AACD,GAbH,CAD2B;AAAA,CAA7B;;AAkBAN,oBAAoB,CAACS,SAArB,GAAiC;AAC/BR,EAAAA,QAAQ,EAAEP;AADqB,CAAjC;AAIA,eAAeM,oBAAf","sourcesContent":["import React from 'react'\nimport { func } from 'prop-types'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\n\nimport { isClient } from 'app/lib/func'\n\nconst query = gql`\n  query CurrentUser {\n    user: currentUserContext {\n      ... on UserUser {\n        uid\n        mail\n        name\n      }\n    }\n  }\n`\n\nlet refetchedOnClient = false\n\nconst CurrentUserContainer = ({ children }) => (\n  <Query query={ query }>\n    { ({ loading, error, data, refetch, ...result }) => {\n      if (loading) return \"Loading...\";\n      if (error) return `Error! ${error.message}`;\n      // Force a refetch on the client inside to make sure\n      // the cached SSR anonymous user is replaced, in case\n      // the user is already logged in..\n      if (!loading && !refetchedOnClient && isClient()) {\n        refetchedOnClient = true\n        refetch()\n      }\n\n      return children({ user: data.user, ...result })\n    } }\n  </Query>\n)\n\nCurrentUserContainer.propTypes = {\n  children: func,\n}\n\nexport default CurrentUserContainer\n"]},"metadata":{},"sourceType":"module"}