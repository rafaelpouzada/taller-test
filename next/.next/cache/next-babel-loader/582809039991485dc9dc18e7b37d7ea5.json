{"ast":null,"code":"\"use strict\";\n\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/drupal/app/next/src/modules/auth/containers/CurrentUserContainer.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { func } from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { isClient } from \"../../../lib/func\";\nconst query = gql`\n  query CurrentUser {\n    user: currentUserContext {\n      ... on UserUser {\n        uid\n        mail\n        name\n      }\n    }\n  }\n`;\nlet refetchedOnClient = false;\n\nconst CurrentUserContainer = ({\n  children\n}) => __jsx(Query, {\n  query: query,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, (_ref) => {\n  let {\n    loading,\n    error,\n    data,\n    refetch\n  } = _ref,\n      result = _objectWithoutProperties(_ref, [\"loading\", \"error\", \"data\", \"refetch\"]);\n\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`; // Force a refetch on the client inside to make sure\n  // the cached SSR anonymous user is replaced, in case\n  // the user is already logged in..\n\n  if (!loading && !refetchedOnClient && isClient()) {\n    refetchedOnClient = true;\n    refetch();\n  }\n\n  return children(_objectSpread({\n    user: data.user\n  }, result));\n});\n\nCurrentUserContainer.propTypes = {\n  children: func\n};\nexport default CurrentUserContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/auth/containers/CurrentUserContainer.js"],"names":["React","func","gql","Query","isClient","query","refetchedOnClient","CurrentUserContainer","children","loading","error","data","refetch","result","message","user","propTypes"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA,SAASC,QAAT;AAEA,MAAMC,KAAK,GAAGH,GAAI;;;;;;;;;;CAAlB;AAYA,IAAII,iBAAiB,GAAG,KAAxB;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAC3B,MAAC,KAAD;AAAO,EAAA,KAAK,EAAGH,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,UAAkD;AAAA,MAAjD;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA;AAAxB,GAAiD;AAAA,MAAbC,MAAa;;AAClD,MAAIJ,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACI,OAAQ,EAA/B,CAFuC,CAGlD;AACA;AACA;;AACA,MAAI,CAACL,OAAD,IAAY,CAACH,iBAAb,IAAkCF,QAAQ,EAA9C,EAAkD;AAChDE,IAAAA,iBAAiB,GAAG,IAApB;AACAM,IAAAA,OAAO;AACR;;AAED,SAAOJ,QAAQ;AAAGO,IAAAA,IAAI,EAAEJ,IAAI,CAACI;AAAd,KAAuBF,MAAvB,EAAf;AACD,CAbH,CADF;;AAkBAN,oBAAoB,CAACS,SAArB,GAAiC;AAC/BR,EAAAA,QAAQ,EAAEP;AADqB,CAAjC;AAIA,eAAeM,oBAAf","sourcesContent":["import React from 'react'\nimport { func } from 'prop-types'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\n\nimport { isClient } from 'app/lib/func'\n\nconst query = gql`\n  query CurrentUser {\n    user: currentUserContext {\n      ... on UserUser {\n        uid\n        mail\n        name\n      }\n    }\n  }\n`\n\nlet refetchedOnClient = false\n\nconst CurrentUserContainer = ({ children }) => (\n  <Query query={ query }>\n    { ({ loading, error, data, refetch, ...result }) => {\n      if (loading) return \"Loading...\";\n      if (error) return `Error! ${error.message}`;\n      // Force a refetch on the client inside to make sure\n      // the cached SSR anonymous user is replaced, in case\n      // the user is already logged in..\n      if (!loading && !refetchedOnClient && isClient()) {\n        refetchedOnClient = true\n        refetch()\n      }\n\n      return children({ user: data.user, ...result })\n    } }\n  </Query>\n)\n\nCurrentUserContainer.propTypes = {\n  children: func,\n}\n\nexport default CurrentUserContainer\n"]},"metadata":{},"sourceType":"module"}