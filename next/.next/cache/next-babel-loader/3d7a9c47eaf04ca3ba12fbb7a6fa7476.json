{"ast":null,"code":"\"use strict\";\n\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/drupal/app/next/src/modules/auth/containers/SigninContainer/SigninContainer.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Field } from 'react-final-form';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport { combine, condition, required, minLength, email, equalsField } from \"../../../../lib/form/validation\";\nimport { loginMutation, registerMutation } from \"./mutations\";\nexport var labels = {\n  name: 'Username',\n  email: 'E-mail',\n  password: 'Password',\n  passwordConfirm: 'Confirm password'\n};\nvar validations = {\n  name: combine([required]),\n  email: combine([required, email]),\n  password: combine([required, minLength(6)]),\n  passwordConfirm: condition(function (value, _ref) {\n    var register = _ref.register;\n    return register;\n  }, [required, equalsField('password', labels.password)])\n};\n/**\n * Grab actual error from GraphQL error.\n */\n\nvar normalizeError = function normalizeError(err) {\n  return err.graphQLErrors ? err.graphQLErrors[0].message : err.message;\n};\n/**\n * Redirect when registered/logged in.\n */\n\n\nvar redirect = function redirect() {\n  Router.push('/channel', '/messages/general');\n  return undefined;\n};\n/**\n * Submit handler: switch between register and login based on form values.\n */\n\n\nvar handleSubmit = function handleSubmit(_ref2) {\n  var register = _ref2.register,\n      login = _ref2.login;\n  return function (variables) {\n    return (variables.register ? register : login)({\n      variables: variables\n    }).then(redirect)[\"catch\"](normalizeError);\n  };\n};\n\nvar SigninContainer = function SigninContainer(_ref3) {\n  var children = _ref3.children;\n  return __jsx(Mutation, {\n    mutation: loginMutation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, function (login) {\n    return __jsx(Mutation, {\n      mutation: registerMutation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, function (register) {\n      return __jsx(Form, {\n        children: children,\n        onSubmit: handleSubmit({\n          register: register,\n          login: login\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    });\n  });\n};\n/**\n * Composable name field.\n */\n\n\nSigninContainer.Username = function (props) {\n  return __jsx(Field, _extends({\n    name: \"name\",\n    validate: validations.name\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n/**\n * Composable e-mail field.\n */\n\n\nSigninContainer.Email = function (props) {\n  return __jsx(Field, _extends({\n    name: \"email\",\n    validate: validations.email\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }));\n};\n/**\n * Composable password field.\n */\n\n\nSigninContainer.Password = function (props) {\n  return __jsx(Field, _extends({\n    name: \"password\",\n    type: \"password\",\n    validate: validations.password\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }));\n};\n/**\n * Composable password-confirm field.\n */\n\n\nSigninContainer.PasswordConfirm = function (props) {\n  return __jsx(Field, _extends({\n    name: \"passwordConfirm\",\n    type: \"password\",\n    validate: validations.passwordConfirm,\n    validateFields: ['password']\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }));\n};\n/**\n * Composable register field.\n */\n\n\nSigninContainer.Register = function (props) {\n  return __jsx(Field, _extends({\n    name: \"register\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }));\n};\n\nSigninContainer.propTypes = {\n  children: PropTypes.func\n};\nexport default SigninContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/auth/containers/SigninContainer/SigninContainer.js"],"names":["React","PropTypes","Form","Field","Mutation","Router","combine","condition","required","minLength","email","equalsField","loginMutation","registerMutation","labels","name","password","passwordConfirm","validations","value","register","normalizeError","err","graphQLErrors","message","redirect","push","undefined","handleSubmit","login","variables","then","SigninContainer","children","Username","props","Email","Password","PasswordConfirm","Register","propTypes","func"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,KAAlD,EAAyDC,WAAzD;AAEA,SAASC,aAAT,EAAwBC,gBAAxB;AAEA,OAAO,IAAMC,MAAM,GAAG;AACpBC,EAAAA,IAAI,EAAE,UADc;AAEpBL,EAAAA,KAAK,EAAE,QAFa;AAGpBM,EAAAA,QAAQ,EAAE,UAHU;AAIpBC,EAAAA,eAAe,EAAE;AAJG,CAAf;AAOP,IAAMC,WAAW,GAAG;AAClBH,EAAAA,IAAI,EAAET,OAAO,CAAC,CAACE,QAAD,CAAD,CADK;AAElBE,EAAAA,KAAK,EAAEJ,OAAO,CAAC,CAACE,QAAD,EAAWE,KAAX,CAAD,CAFI;AAGlBM,EAAAA,QAAQ,EAAEV,OAAO,CAAC,CAACE,QAAD,EAAWC,SAAS,CAAC,CAAD,CAApB,CAAD,CAHC;AAIlBQ,EAAAA,eAAe,EAAEV,SAAS,CACxB,UAACY,KAAD;AAAA,QAAUC,QAAV,QAAUA,QAAV;AAAA,WAAyBA,QAAzB;AAAA,GADwB,EAExB,CAACZ,QAAD,EAAWG,WAAW,CAAC,UAAD,EAAaG,MAAM,CAACE,QAApB,CAAtB,CAFwB;AAJR,CAApB;AAUA;;;;AAGA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,GAAG;AAAA,SAAIA,GAAG,CAACC,aAAJ,GAAoBD,GAAG,CAACC,aAAJ,CAAkB,CAAlB,EAAqBC,OAAzC,GAAmDF,GAAG,CAACE,OAA3D;AAAA,CAA1B;AAEA;;;;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBpB,EAAAA,MAAM,CAACqB,IAAP,CAAY,UAAZ,EAAwB,mBAAxB;AACA,SAAOC,SAAP;AACD,CAHD;AAKA;;;;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAGR,QAAH,SAAGA,QAAH;AAAA,MAAaS,KAAb,SAAaA,KAAb;AAAA,SAAyB,UAAAC,SAAS;AAAA,WACrD,CAACA,SAAS,CAACV,QAAV,GAAqBA,QAArB,GAAgCS,KAAjC,EAAwC;AAAEC,MAAAA,SAAS,EAATA;AAAF,KAAxC,EACGC,IADH,CACQN,QADR,WAESJ,cAFT,CADqD;AAAA,GAAlC;AAAA,CAArB;;AAKA,IAAMW,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGC,QAAH,SAAGA,QAAH;AAAA,SACtB,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAGrB,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,UAAAiB,KAAK;AAAA,WACL,MAAC,QAAD;AAAU,MAAA,QAAQ,EAAGhB,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,UAAAO,QAAQ;AAAA,aACR,MAAC,IAAD;AACE,QAAA,QAAQ,EAAGa,QADb;AAEE,QAAA,QAAQ,EAAGL,YAAY,CAAC;AAAER,UAAAA,QAAQ,EAARA,QAAF;AAAYS,UAAAA,KAAK,EAALA;AAAZ,SAAD,CAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADQ;AAAA,KADZ,CADK;AAAA,GADT,CADsB;AAAA,CAAxB;AAeA;;;;;AAGAG,eAAe,CAACE,QAAhB,GAA2B,UAAAC,KAAK;AAAA,SAC9B,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAGjB,WAAW,CAACH;AAFzB,KAGOoB,KAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD8B;AAAA,CAAhC;AAQA;;;;;AAGAH,eAAe,CAACI,KAAhB,GAAwB,UAAAD,KAAK;AAAA,SAC3B,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,QAAQ,EAAGjB,WAAW,CAACR;AAFzB,KAGOyB,KAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD2B;AAAA,CAA7B;AAQA;;;;;AAGAH,eAAe,CAACK,QAAhB,GAA2B,UAAAF,KAAK;AAAA,SAC9B,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,QAAQ,EAAGjB,WAAW,CAACF;AAHzB,KAIOmB,KAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD8B;AAAA,CAAhC;AASA;;;;;AAGAH,eAAe,CAACM,eAAhB,GAAkC,UAAAH,KAAK;AAAA,SACrC,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,QAAQ,EAAGjB,WAAW,CAACD,eAHzB;AAIE,IAAA,cAAc,EAAG,CAAC,UAAD;AAJnB,KAKOkB,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADqC;AAAA,CAAvC;AAUA;;;;;AAGAH,eAAe,CAACO,QAAhB,GAA2B,UAAAJ,KAAK;AAAA,SAC9B,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC;AAAZ,KAA4BA,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD8B;AAAA,CAAhC;;AAIAH,eAAe,CAACQ,SAAhB,GAA4B;AAC1BP,EAAAA,QAAQ,EAAEhC,SAAS,CAACwC;AADM,CAA5B;AAIA,eAAeT,eAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Form, Field } from 'react-final-form'\nimport { Mutation } from 'react-apollo'\nimport Router from 'next/router'\n\nimport { combine, condition, required, minLength, email, equalsField } from 'app/lib/form/validation'\n\nimport { loginMutation, registerMutation } from './mutations'\n\nexport const labels = {\n  name: 'Username',\n  email: 'E-mail',\n  password: 'Password',\n  passwordConfirm: 'Confirm password',\n}\n\nconst validations = {\n  name: combine([required]),\n  email: combine([required, email]),\n  password: combine([required, minLength(6)]),\n  passwordConfirm: condition(\n    (value, { register }) => register,\n    [required, equalsField('password', labels.password)],\n  )\n}\n\n/**\n * Grab actual error from GraphQL error.\n */\nconst normalizeError = err => err.graphQLErrors ? err.graphQLErrors[0].message : err.message\n\n/**\n * Redirect when registered/logged in.\n */\nconst redirect = () => {\n  Router.push('/channel', '/messages/general')\n  return undefined\n}\n\n/**\n * Submit handler: switch between register and login based on form values.\n */\nconst handleSubmit = ({ register, login }) => variables =>\n  (variables.register ? register : login)({ variables })\n    .then(redirect)\n    .catch(normalizeError)\n\nconst SigninContainer = ({ children }) => (\n  <Mutation mutation={ loginMutation }>\n    { login => (\n      <Mutation mutation={ registerMutation }>\n        { register => (\n          <Form\n            children={ children }\n            onSubmit={ handleSubmit({ register, login }) }\n          />\n        ) }\n      </Mutation>\n    ) }\n  </Mutation>\n)\n\n/**\n * Composable name field.\n */\nSigninContainer.Username = props => (\n  <Field\n    name='name'\n    validate={ validations.name }\n    { ...props }\n  />\n)\n\n/**\n * Composable e-mail field.\n */\nSigninContainer.Email = props => (\n  <Field\n    name='email'\n    validate={ validations.email }\n    { ...props }\n  />\n)\n\n/**\n * Composable password field.\n */\nSigninContainer.Password = props => (\n  <Field\n    name='password'\n    type='password'\n    validate={ validations.password }\n    { ...props }\n  />\n)\n\n/**\n * Composable password-confirm field.\n */\nSigninContainer.PasswordConfirm = props => (\n  <Field\n    name='passwordConfirm'\n    type='password'\n    validate={ validations.passwordConfirm }\n    validateFields={ ['password'] }\n    { ...props }\n  />\n)\n\n/**\n * Composable register field.\n */\nSigninContainer.Register = props => (\n  <Field name='register' { ...props } />\n)\n\nSigninContainer.propTypes = {\n  children: PropTypes.func,\n}\n\nexport default SigninContainer\n"]},"metadata":{},"sourceType":"module"}