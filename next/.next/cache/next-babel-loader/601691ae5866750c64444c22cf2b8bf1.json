{"ast":null,"code":"\"use strict\";\n\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/drupal/app/next/src/modules/channel/containers/NewMessageContainer.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { func, shape, number } from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { Form, Field } from 'react-final-form';\nconst mutation = gql`\n  mutation CreateMessage ($user: String!, $channel: String!, $body: String!) {\n    createMessageMessage(input: {\n      userId: { targetId: $user }\n      body: { value: $body }\n      channel: { targetId: $channel }\n    }) {\n      errors\n      violations {\n        message\n        path\n        code\n      }\n      entity {\n        entityId\n      }\n    }\n  }\n`; // @TODO: implement optimistic query on messages?\n\nconst NewMessageContainer = ({\n  children,\n  user,\n  channel\n}) => __jsx(Mutation, {\n  mutation: mutation,\n  refetchQueries: ['Messages'],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}, send => __jsx(Form, {\n  children: children,\n  onSubmit: ({\n    body\n  }, {\n    reset\n  }) => {\n    reset();\n    send({\n      variables: {\n        body,\n        user: user.uid,\n        channel: channel.tid\n      }\n    });\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}));\n\nNewMessageContainer.propTypes = {\n  children: func,\n  user: shape({\n    uid: number.isRequired\n  }).isRequired,\n  channel: shape({\n    tid: number.isRequired\n  }).isRequired\n};\n/**\n * Composable message field.\n */\n\nNewMessageContainer.Message = props => __jsx(Field, _extends({\n  name: \"body\"\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}));\n\nexport default NewMessageContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/channel/containers/NewMessageContainer.js"],"names":["React","func","shape","number","gql","Mutation","Form","Field","mutation","NewMessageContainer","children","user","channel","send","body","reset","variables","uid","tid","propTypes","isRequired","Message","props"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,YAApC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AAEA,MAAMC,QAAQ,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;CAArB,C,CAoBA;;AAEA,MAAMK,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAC1B,MAAC,QAAD;AAAU,EAAA,QAAQ,EAAGJ,QAArB;AAAgC,EAAA,cAAc,EAAG,CAAC,UAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACIK,IAAI,IACJ,MAAC,IAAD;AACE,EAAA,QAAQ,EAAGH,QADb;AAEE,EAAA,QAAQ,EAAG,CAAC;AAAEI,IAAAA;AAAF,GAAD,EAAW;AAAEC,IAAAA;AAAF,GAAX,KAAyB;AAClCA,IAAAA,KAAK;AAELF,IAAAA,IAAI,CAAC;AACHG,MAAAA,SAAS,EAAE;AACTF,QAAAA,IADS;AAETH,QAAAA,IAAI,EAAEA,IAAI,CAACM,GAFF;AAGTL,QAAAA,OAAO,EAAEA,OAAO,CAACM;AAHR;AADR,KAAD,CAAJ;AAOD,GAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,CADF;;AAqBAT,mBAAmB,CAACU,SAApB,GAAgC;AAC9BT,EAAAA,QAAQ,EAAET,IADoB;AAE9BU,EAAAA,IAAI,EAAET,KAAK,CAAC;AAAEe,IAAAA,GAAG,EAAEd,MAAM,CAACiB;AAAd,GAAD,CAAL,CAAkCA,UAFV;AAG9BR,EAAAA,OAAO,EAAEV,KAAK,CAAC;AAAEgB,IAAAA,GAAG,EAAEf,MAAM,CAACiB;AAAd,GAAD,CAAL,CAAkCA;AAHb,CAAhC;AAMA;;;;AAGAX,mBAAmB,CAACY,OAApB,GAA8BC,KAAK,IACjC,MAAC,KAAD;AAAO,EAAA,IAAI,EAAC;AAAZ,GAAwBA,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;AAIA,eAAeb,mBAAf","sourcesContent":["import React from 'react'\nimport { func, shape, number } from 'prop-types'\nimport gql from 'graphql-tag'\nimport { Mutation } from 'react-apollo'\nimport { Form, Field } from 'react-final-form'\n\nconst mutation = gql`\n  mutation CreateMessage ($user: String!, $channel: String!, $body: String!) {\n    createMessageMessage(input: {\n      userId: { targetId: $user }\n      body: { value: $body }\n      channel: { targetId: $channel }\n    }) {\n      errors\n      violations {\n        message\n        path\n        code\n      }\n      entity {\n        entityId\n      }\n    }\n  }\n`\n\n// @TODO: implement optimistic query on messages?\n\nconst NewMessageContainer = ({ children, user, channel }) => (\n  <Mutation mutation={ mutation } refetchQueries={ ['Messages'] }>\n    { send => (\n      <Form\n        children={ children }\n        onSubmit={ ({ body }, { reset }) => {\n          reset()\n\n          send({\n            variables: {\n              body,\n              user: user.uid,\n              channel: channel.tid\n            }\n          })\n        } }\n      />\n    ) }\n  </Mutation>\n)\n\nNewMessageContainer.propTypes = {\n  children: func,\n  user: shape({ uid: number.isRequired }).isRequired,\n  channel: shape({ tid: number.isRequired }).isRequired,\n}\n\n/**\n * Composable message field.\n */\nNewMessageContainer.Message = props => (\n  <Field name='body' { ...props } />\n)\n\nexport default NewMessageContainer\n"]},"metadata":{},"sourceType":"module"}