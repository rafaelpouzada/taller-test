{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"/drupal/app/next/src/modules/channel/containers/NewChannelContainer.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { func } from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nconst mutation = gql`\n  mutation CreateChannel ($name: String!) {\n    createTaxonomyTermChannel (input: { name: $name }) {\n      violations {\n        message\n        path\n        code\n      }\n      errors\n      entity {\n        entityId\n      }\n    }\n  }\n`; // @TODO: implement optimistic query on channels?\n\nconst NewMessageContainer = ({\n  children\n}) => __jsx(Mutation, {\n  mutation: mutation,\n  refetchQueries: ['Channels'],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, mutate => children(name => {\n  if (name) {\n    mutate({\n      variables: {\n        name\n      }\n    });\n  }\n}));\n\nNewMessageContainer.propTypes = {\n  children: func\n};\nexport default NewMessageContainer;","map":{"version":3,"sources":["/drupal/app/next/src/modules/channel/containers/NewChannelContainer.js"],"names":["React","func","gql","Mutation","mutation","NewMessageContainer","children","mutate","name","variables","propTypes"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,MAAMC,QAAQ,GAAGF,GAAI;;;;;;;;;;;;;;CAArB,C,CAgBA;;AAEA,MAAMG,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAC1B,MAAC,QAAD;AAAU,EAAA,QAAQ,EAAGF,QAArB;AAAgC,EAAA,cAAc,EAAG,CAAC,UAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACIG,MAAM,IACND,QAAQ,CAACE,IAAI,IAAI;AACf,MAAIA,IAAJ,EAAU;AACRD,IAAAA,MAAM,CAAC;AAAEE,MAAAA,SAAS,EAAE;AAAED,QAAAA;AAAF;AAAb,KAAD,CAAN;AACD;AACF,CAJO,CAFZ,CADF;;AAYAH,mBAAmB,CAACK,SAApB,GAAgC;AAC9BJ,EAAAA,QAAQ,EAAEL;AADoB,CAAhC;AAIA,eAAeI,mBAAf","sourcesContent":["import React from 'react'\nimport { func } from 'prop-types'\nimport gql from 'graphql-tag'\nimport { Mutation } from 'react-apollo'\n\nconst mutation = gql`\n  mutation CreateChannel ($name: String!) {\n    createTaxonomyTermChannel (input: { name: $name }) {\n      violations {\n        message\n        path\n        code\n      }\n      errors\n      entity {\n        entityId\n      }\n    }\n  }\n`\n\n// @TODO: implement optimistic query on channels?\n\nconst NewMessageContainer = ({ children }) => (\n  <Mutation mutation={ mutation } refetchQueries={ ['Channels'] }>\n    { mutate => (\n      children(name => {\n        if (name) {\n          mutate({ variables: { name } })\n        }\n      })\n    ) }\n  </Mutation>\n)\n\nNewMessageContainer.propTypes = {\n  children: func,\n}\n\nexport default NewMessageContainer\n"]},"metadata":{},"sourceType":"module"}